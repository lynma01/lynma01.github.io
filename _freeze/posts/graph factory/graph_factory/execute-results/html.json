{
  "hash": "aee4ec255c3e5623e9132a8c3c0cbbb6",
  "result": {
    "markdown": "---\ntitle: Managing Von Nueman Probes\ndraft: true\n---\n\n# Summary:\nAfter FTX's crypto-crash, it's natural that VCs will rush to cover their portfolios in the same way young men clutch themselves after watching a comrade get hit square in the nads. Analysts, their MDs, and other investors will be critically analyzing the business cases for new and unproven technology.  \n\nWhile IoT isn't the most egregious offender when it comes nebulously defined business value (looking at you web-advertising), it's not immediately clear how the costs associated with adopting \"cutting-edge\" IoT technology are covered by the resulting increased revenue.\n\nTo further complicate things; materials describing IoT use-cases fall into the same \"hype-trap\" that crypto does. IoT companies adorn themselves in claims of techno-omnisence and how anything-it-touches-becomes-gold. \n\nIn this article, we're going create data-models of different business scenarios to articulate examples of IoT's strengths, weaknesses, and opportunities.\n\n# IoT = [Robots, Data, Computers]:\n\nGraph databases represent data in a \"node - edge - node\" format. This novel data format is normally used for social-network data. However, graph databases can be used for any kind of \"network\" analysis: work-flows, machine-processes, systems-models.\n\nIn this article, I will demonstrate creating these three different examples and why composing these data-models in graph format yields important analytical benefits.\n\n\n# Graph databases\nFor this article, we're going to be using [CogDB](https://cogDB.io) as our graph database. CogDB is a python implementation of a graph database. Naturally, it's only intended for light-weight uses cases - so it's perfect for us as we articulate our ideas about systems and networks.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom cog.torque import Graph\ng = Graph(\"people\")\ng.put(\"alice\" , \"follows\", \"bob\")\ng.put(\"bob\", \"follows\", \"alice\")\n\ng.v().tag(\"from\").out(\"follows\").tag(\"to\").view(\"follows\").render()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n  <iframe srcdoc='\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Cog Graph</title>\n    <style type=\"text/css\">\n       body {\n        padding: 0;\n        margin: 0;\n        width: 100%;!important; \n        height: 100%;!important; \n      }\n\n      #cog-graph-view {\n        width: 700px;\n        height: 700px;\n      }\n    </style>\n\n\n    <script\n      type=\"text/javascript\"\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/vis-network/9.1.2/dist/vis-network.min.js\"\n    ></script>\n  </head>  \n \n  <body>\n    <div id=\"cog-graph-view\"></div>\n\n    <script type=\"text/javascript\">\n\n    results =[{\"id\": \"alice\", \"from\": \"bob\", \"to\": \"alice\"}, {\"id\": \"bob\", \"from\": \"alice\", \"to\": \"bob\"}] \n\n    var nodes = new vis.DataSet();\n    var edges = new vis.DataSet();\n    for (let i = 0; i < results.length; i++) {\n        res = results[i];\n        nodes.update({\n            id: res.from,\n            label: res.from\n        });\n        nodes.update({\n            id: res.to,\n            label: res.to\n        });\n        edges.update({\n            from: res.from,\n            to: res.to\n        });\n\n    }\n\n    var container = document.getElementById(\"cog-graph-view\");\n    var data = {\n        nodes: nodes,\n        edges: edges,\n    };\n    var options = {\n        nodes: {\n            font: {\n                size: 20,\n                color: \"black\"\n            },\n            color: \"#46944f\",\n            shape: \"dot\",\n            widthConstraint: 200,\n\n        },\n        edges: {\n            font: \"12px arial #ff0000\",\n            scaling: {\n                label: true,\n            },\n            shadow: true,\n            smooth: true,\n            arrows: { to: {enabled: true}}\n        },\n        physics: {\n            barnesHut: {\n                gravitationalConstant: -30000\n            },\n            stabilization: {\n                iterations: 1000\n            },\n        }\n\n    };\n    var network = new vis.Network(container, data, options);\n    </script>\n  </body>\n</html>\n\n' width=\"700\" height=\"700\"> </iframe> \n```\n:::\n:::\n\n\nMachine system:\nEvery node is a production center. Every edge is a transportation-coordinate.\n    - What's produced? What's consumed? and in what quantities?\n\nCommunity system:\nEvery node is a restaurant/school. Every edge is a social tie.\n\nDataframe which serves as an event-log of node-production/consumption of resources.\n\n",
    "supporting": [
      "graph_factory_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}