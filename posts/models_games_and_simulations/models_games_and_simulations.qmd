---
title: "Models, Games, and Simulations"
filters:
   - nutshell

draft: true
---

## Examples:
- The most excellent Nicky Chase's [emoji-based simulation of the game-of-life](https://github.com/ncase/sim)
  - https://github.com/daniellmb/MinPubSub


I think the mark of greatness for any game is how ***alive*** it is; where static visuals of data can be beautiful, like those found on [Flowing Data](https://flowingdata.com/), games reflect changes from the decisions of the user.

# Where does fun come from?
Fun and play are vital to all of us, but the nature of how we socially-signal our "in-group" worthiness is always at play. 

# Strategy, Systems, and the evolutionary struggle to see the "big picture"
Another Nicky Chase learning-device for illustrating system dynamics called [loopy](https://ncase.me/loopy/)

```{python}
from faker import Faker 
import random 
import duckdb 
from datetime import datetime, timedelta 
 
fake = Faker() 
 
# Create SQLite database and connect to it 
with duckdb.connect('online_merch_store.db') as conn: 
  conn.cursor().exec("SELECT 52") 

```

```{python}
order_data = {
  "OrderID": "some_id"
  , "CustomerID": "some_id"
  , ""
}


```



```{python}
conn = sqlite3.connect('online_merch_store.db') 
cursor = conn.cursor() 

# Generate fake data for Product table 
for _ in range(10): 
    product_name = fake.word() 
    description = fake.text() 
    price = round(random.uniform(10, 100), 2) 
    stock_quantity = random.randint(10, 100) 
    cursor.execute("INSERT INTO Product (Name, Description, Price, StockQuantity) VALUES (?, ?, ?, ?)", 
                   (product_name, description, price, stock_quantity)) 
 
# Generate fake data for Category table 
categories = ['Electronics', 'Clothing', 'Books', 'Toys', 'Home Goods'] 
for category in categories: 
    cursor.execute("INSERT INTO Category (Name) VALUES (?)", (category,)) 
 
# Generate fake data for ProductCategory table 
product_ids = list(range(1, 11)) 
category_ids = list(range(1, 6))

for product_id in product_ids: 
  random.shuffle(category_ids) 
  num_categories = random.randint(1, 3) 
  selected_categories = category_ids[:num_categories] 
  for category_id in selected_categories: 
      cursor.execute("INSERT INTO ProductCategory (ProductID, CategoryID) VALUES (?, ?)", (product_id, category_id)) 
 
# Generate fake data for Customer table 
for _ in range(5): 
  first_name = fake.first_name() 
  last_name = fake.last_name() 
  email = fake.email() 
  password = fake.password() 
  address = fake.address() 
  cursor.execute("INSERT INTO Customer (FirstName, LastName, Email, Password, Address) VALUES (?, ?, ?, ?, ?)", (first_name, last_name, email, password, address)) 

# Generate fake data for Order table and OrderItem table 
for customer_id in range(1, 6): 
  order_date = fake.date_time_between(start_date="-30d", end_date="now")
  total_amount = round(random.uniform(50, 200), 2) 
  order_status = random.choice(['Pending', 'Shipped', 'Delivered']) 
  cursor.execute("INSERT INTO 'Order' (CustomerID, OrderDate, TotalAmount, OrderStatus) VALUES (?, ?, ?, ?)", (customer_id, order_date, total_amount, order_status)) 
  order_id = cursor.lastrowid 
 
  for _ in range(random.randint(1, 5)): 
    product_id = random.randint(1, 10) 
    quantity = random.randint(1, 3) 
    price = round(random.uniform(10, 50), 2) 
    cursor.execute("INSERT INTO OrderItem (OrderID, ProductID, Quantity, Price) VALUES (?, ?, ?, ?)", (order_id, product_id, quantity, price)) 
 
# Commit changes and close connection 
conn.commit() 
conn.close()

```