---
title: "Shilling for Elixir"
date: "2024-01-07"
filters:
   - nutshell

draft: true
---

# Functional Programming is the best paradigm for me post-lobotomy

## Case statements
Kind of like enum matching within functions
```{elixir}
case Data.fromiso8601(input) do
    {:ok, date} -> # because most functions return a tuple, we're able to easily create control-flows
        "We got a valid date: #{inspect(date)}"

    {:error, reason} -> # however, the tricky bit is that the return values are function-specific
        "Oh no, the date is invalid. Reason: #{inpsect(reason)}"
end
```

The basic format is `case... do... -> end`

## Pattern matching
```{elixir}
# This is the data we're looking to match from
map = %{:elixir => :functional, :python => :object_oriented}

# The value we're specifying as the search pattern goes in the left
# But notice how there's now a new variable `type` which holds the result
%{:elixir => type} = map # <- Notice how the item we're inspecting goes in the right-hand side

type
```

## Elixir Agents
`Agent`s, `Task`s, and `genserver`s are all "[processes](https://hexdocs.pm/elixir/1.16.0/processes.html)" spawned by Elixir's process management system. Processes will always return the Process-Identifier (PID) whenever initialized and pattern-matched like so:

```{elixir}
{:ok, agent} = Agent.start_link(fn -> [] end) # Agent that returns an empty list
# returns: {:ok, #PID<0.166.0>}
```

But were we to `get`, or `update` the `Agent`, it would return the list we're expecting from the anonymous function:

```{elixir}
Agent.get(agent, fn list -> list end)
# returns: []

Agent.update(agent, fn list -> [0 | list] end)
Agent.get(agent, fn list -> list end)
```

### How long do processes live?
Note that any `process` only lives as long as it takes to complete its function. Once complete, the `process` automatically closes itself:

```{elixir}
pid = spawn(fn -> 1 + 2 end)
# returns #PIX<0.44.0>

Process.alive?(pid)
# returns false
```

## Modules 

Modules are a method of organizing `function` or `struct` definitions. Likewise, modules can extend themselves with other modeuls as we see below with `Portal.Door` extending the `Portal` module: 

```{elixir}
defmodule Portal.Door do
  use Agent # This is a namespace statement, "bringing some `Agent`-related functionality into the module."

  # This creates the portal-door
  def start_link(color) when is_atom(color) do # `when` is a guard statement, only executing when specified
    Agent.start_link(fn -> [] end, name: color) # https://hexdocs.pm/elixir/1.16.0/Agent.html#start_link/2
  end

  def get(door) do # This gets the portal-door, returning its contents
    Agent.get(door, fn list -> list end)
  end

  def push(door, value) do # This updates the portal door to include the portal's list
    Agent.update(door, fn list -> [value | list] end)
  end

  def pop(door) do # Given some door with its list, add a tuple to the list?
    Agent.get_and_update(door, fn list ->
      case list do
        # The normal case - when the list has a head & tail, return two tuples
        [h | t] -> {{:ok, h}, t} # but then removes the head?

        # Error case, return a tuple with `:error` and an empty list
        [] -> {:error, []}
      end
    end)
  end

  def stop(door) do 
    Agent.stop(door) # I'm assuming this stops the `door` process, effectively killing the portal
  end
end
```

And then `Portal`

```{elixir}
defmodule Portal do
  defstruct [:left, :right]

  def shoot(color) do # `Potal` invokes `Portal.Door` without requiring a `use` statement?
    Portal.Door.start_link(color)
  end

  def transfer(left_door, right_door, data) do
    # First add all data to the portal on the left
    for item <- data do # wait, so Elixir does have for loops?
      Portal.Door.push(left_door, item)
    end

    # Returns a portal struct with the doors
    %Portal{left: left_door, right: right_door}
  end

  def push_right(portal) do
    # See if we can pop data from left. If so, push the
    # popped data to the right. Otherwise, do nothing.
    case Portal.Door.pop(portal.left) do
      :error   -> :ok
      {:ok, h} -> Portal.Door.push(portal.right, h)
    end

    # Let's return the portal itself
    portal
  end

  def close(portal) do # so each `Portal.Door` is an `Agent` which is killed with the `.stop` function. 
    Portal.Door.stop(portal.left) # and each `Portal.Door` requires its own `.stop`, because they're separate
    Portal.Door.stop(portal.right)
    :ok
  end
end

```

### Some notes about the `Agent` module:
- an `Agent` is just another type of process in Elixir. 

- Starting the same `Agent` twice will return an `{:error, {:already_started, #PID<0.205.0}}`. This tells me that Elixir is intelligent about 1: comprehending what process you're referring to, and 2: ensuring processes can't be overwritten.

## Structs

```{elixir}
defmodule User do # Defines a module, nothing we haven't seen before
  defstruct [:name, :age] # This defines the data which a `User` can contain?
end
```

However, when referring to module-`struct`s like the one above, the syntax is specific:

```{elixir}
user = %User{name: "john doe", age: 27}

# Fields can be accessed with dot-notation
user.name # returns: "john does"

# Pattern matching example:
%User{age: age} = user
age # returns: 27
```

## Protocols - extending datatypes with `defimpl`

Protocols allow us to define ways for other code to make use of our own code. In this case, we're teaching the `inspect` function, which is part of the Elixir kernel, how to print a representation of our `Portal` struct within the CLI. In this case, we're just trying to make the module more user friendly.  

```{elixir}
defimpl Inspect, for: Portal do
  def inspect(%Portal{left: left, right: right}, _) do
    left_door  = inspect(left)
    right_door = inspect(right)

    left_data  = inspect(Enum.reverse(Portal.Door.get(left)))
    right_data = inspect(Portal.Door.get(right))

    max = max(String.length(left_door), String.length(left_data))

    """
    #Portal<
      #{String.pad_leading(left_door, max)} <=> #{right_door}
      #{String.pad_leading(left_data, max)} <=> #{right_data}
    >\
    """
  end
end

# And what we get as a result:
# Portal<
#        :red <=> :purple
#   [1, 2, 3] <=> []
# >

```

## Elixir `Node`s

