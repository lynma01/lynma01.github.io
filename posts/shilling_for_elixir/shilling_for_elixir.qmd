---
title: "Shilling for Elixir"
date: "2024-01-07"
filters:
   - nutshell

draft: true
---

# Functional Programming is the best paradigm for me post-lobotomy

## Case statements
Kind of like enum matching within functions
```{elixir}
case Data.fromiso8601(input) do
    {:ok, date} -> # because most functions return a tuple, we're able to easily create control-flows
        "We got a valid date: #{inspect(date)}"

    {:error, reason} -> # however, the tricky bit is that the return values are function-specific
        "Oh no, the date is invalid. Reason: #{inpsect(reason)}"
end
```

The basic format is `case... do... -> end`

## Pattern matching
```{elixir}
# This is the data we're looking to match from
map = %{:elixir => :functional, :python => :object_oriented}

# The value we're specifying as the search pattern goes in the left
# But notice how there's now a new variable `type` which holds the result
%{:elixir => type} = map # <- Notice how the item we're inspecting goes in the right-hand side

type
```

## Elixir Agents
`Agent`s, `Task`s, and `genserver`s are all "processes" spawned by Elixir's process management system. Processes will always return the Process-Identifier (PID) whenever initiallized and pattern-matched like so:

```{elixir}
{:ok, agent} = Agent.start_link(fn -> [] end) # Agent that returns an empty list
# returns: {:ok, #PID<0.166.0>}
```

But were we to `get`, or `update` the `Agent`, it would return the list we're expecting from the anonymous function:

```{elixir}
Agent.get(agent, fn list -> list end)
# returns: []

Agent.update(agent, fn list -> [0 | list] end)
Agent.get(agent, fn list -> list end)
```

## Modules (Collections of Functions)

```{elixir}
defmodule Portal.Door do
  use Agent # This is a namespace statement, "bringing some `Agent`-related functionality into the module."

  # This creates the portal-door
  def start_link(color) when is_atom(color) do # `when` is a guard statement, only executing when specified
    Agent.start_link(fn -> [] end, name: color) # https://hexdocs.pm/elixir/1.16.0/Agent.html#start_link/2
  end

  def get(door) do # This gets the portal-door, returning its contents
    Agent.get(door, fn list -> list end)
  end

  def push(door, value) do # This updates the portal door to include the portal's list
    Agent.update(door, fn list -> [value | list] end)
  end

  def pop(door) do # Given some door with its list, add a tuple to the list?
    Agent.get_and_update(door, fn list ->
      case list do
        # The normal case - when the list has a head & tail, return two tuples
        [h | t] -> {{:ok, h}, t}

        # Error case, return a tuple with `:error` and an empty list
        [] -> {:error, []}
      end
    end)
  end

  def stop(door) do 
    Agent.stop(door) # I'm assuming this stops the `door` process, effectively killing the portal
  end
end
```